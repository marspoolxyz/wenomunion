pragma ever-solidity >= 0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.sol";
import "tip3/contracts/interfaces/ITokenRoot.sol";
import "tip3/contracts/interfaces/ITokenWallet.sol";

import "tip4/contracts/CollectionBase.tsol";

//https://devnet.venomscan.com/accounts/0:65c3ff8fdd39c2487a9b0536c785ef8d528b1a6e8cefa9c2d03ddb1981255b6b/source-code/contract
 
abstract contract Upgradable {
    

    function upgrade(TvmCell newcode) public virtual {
        require(msg.pubkey() == tvm.pubkey(), 101);
        tvm.accept();
        tvm.commit();
        tvm.setcode(newcode);
        tvm.setCurrentCode(newcode);
        onCodeUpgrade();
    }

    function onCodeUpgrade() internal virtual;
}
 

contract WenomUnion is IAcceptTokensTransferCallback, CollectionBase,Upgradable {
    uint static nonce;
    uint256 static owner;

    address root;
    address wallet;  // Used for transfer
    uint public state;
    uint256 public _supply; // How much tokens will be distributed (with decimals)
    uint128 public _rate; // How much tokens buyer will receive for 1 nanovenom (1*10^9)    
    
    uint public transferCount;
    uint256 public hash_value;


    event StateChange(uint _state);
    event HashChange(uint256 _hash_value);

    event ThankYou(address sender, uint128 amount);
    event NewWallet(address some);

    constructor(
        uint _state, address root_, 
        uint256 supply,uint128 rate,
        TvmCell codeNft, 
        TvmCell codeIndex,
        TvmCell codeIndexBasis,
        string json) 
        

    CollectionBase(codeNft, codeIndex, codeIndexBasis, json) public {

        tvm.accept();
        root = root_;
        _supply = supply;
        _rate  = rate;
        ITokenRoot(root).deployWallet{
            value: 2_000_000_000,
            callback: onDeployWallet
        }(this, 1_000_000_000);

        //sendRemainingGasTo.transfer({ value: 0, flag: 128, bounce: false });


        setState(_state);
        transferCount = _state;
    }

    function onCodeUpgrade() internal override {}  // Contract is upgradeable


    struct FundTransferRequest {
        uint256 hashcode;
        uint amount;
        uint currency;
    }

    FundTransferRequest[] fundTransfer;
    uint256[] hashCodeMap;
    uint128[] transferAmount;


    mapping(uint256 => uint) hashMap;

    mapping(FundTransferRequest => uint) map;

    function send_money(string _secret_code, uint128 _amount, uint _currency) public externalMsg {
        tvm.accept();
        uint256 _hashcode = sha256(_secret_code);

        rnd.setSeed(_hashcode);

        FundTransferRequest p = FundTransferRequest(_hashcode, _amount, _currency);
        map[p] = transferCount;

        transferAmount.push(_amount);

        hashMap[_hashcode] = transferCount;
        transferCount = transferCount + 1;
        emit HashChange(hash_value);

    }







    function checkHashMap(string _secret_code) external view returns (string)
    {
        uint256 _hashcode = sha256(_secret_code);

        if(hashMap.exists(_hashcode))
        {
            return "Secret Code is correct";
        }
        else
        {
            return "Secret Code is wrong";
        }        
    }    

    function mint() external internalMsg {
        _mintNft(_json);
    }

    function mintWithImage(string _userjson) external internalMsg {


        _mintNft(_userjson);
    }

    function onDeployWallet(address _wallet) public {
        wallet = _wallet;
    }

    function getSupply() external view returns (uint256)
    {
        
        return _supply;
            
    }   
    function getWallet() external view returns (address)
    {
        
        return wallet;
            
    }    

    function getHash(string secret_code)  external returns (uint256)
    {
      return sha256(secret_code);
    }

    function getEncryption(string hashcode, string _key)  external returns (string)
    {
        string hash_key = hashcode.substr(1, 6); 
        uint256 _hashcode = sha256("WU-"+_key+hash_key);
            
      return "WU-"+_key+hash_key;
    }    

    function moneyTransfer(string hashcode, string _key, uint128 _amount, uint _currency) external  {
        tvm.accept();

        tvm.rawReserve(3 ever, 0);

        string hash_key = hashcode.substr(1, 6); 
        uint256 _hashcode = sha256("WU-"+_key+hash_key);

        FundTransferRequest p = FundTransferRequest(_hashcode, _amount, _currency);
        map[p] = transferCount;

        transferAmount.push(_amount);

        hashMap[_hashcode] = transferCount;
        transferCount = transferCount + 1;
        emit HashChange(hash_value);
    }

    function transferMoney(uint128 deposit) public externalMsg {  //external view {

        tvm.rawReserve(3 ever, 0);

        if (deposit > msg.value + 1 ever) { // if we using require, we are frozing incoming value in this contract, so just return it 
            msg.sender.transfer({ value: 0, flag: 128, bounce: false });
        } else {
            uint128 purchase = _rate * deposit;
            if (purchase > _supply) {
                msg.sender.transfer({ value: 0, flag: 128, bounce: false});
            } else {
                TvmCell empty;
                // here we just operate with deployed in constructor wallet. owner should provide token supply on this wallet before sales!
                ITokenWallet(wallet).transfer{ value: 0, flag: 128 }(
                    purchase,
                    msg.sender,
                    0.1 ever, // this parameter allows to deploy wallet for user, if it's not deployed yet. (fee takes from message so will be payed by user)
                    msg.sender,
                    false,
                    empty
                );
            }
        }
    }

    function buyTokens(uint128 deposit) public externalMsg {  //external view {

        tvm.rawReserve(3 ever, 0);

        if (deposit > msg.value + 1 ever) { // if we using require, we are frozing incoming value in this contract, so just return it 
            msg.sender.transfer({ value: 0, flag: 128, bounce: false });
        } else {
            uint128 purchase = _rate * deposit;
            if (purchase > _supply) {
                msg.sender.transfer({ value: 0, flag: 128, bounce: false});
            } else {
                TvmCell empty;
                // here we just operate with deployed in constructor wallet. owner should provide token supply on this wallet before sales!
                ITokenWallet(wallet).transfer{ value: 0, flag: 128 }(
                    purchase,
                    msg.sender,
                    0.1 ever, // this parameter allows to deploy wallet for user, if it's not deployed yet. (fee takes from message so will be payed by user)
                    msg.sender,
                    false,
                    empty
                );
            }
        }

    }

    function onAcceptTokensTransfer(
        address tokenRoot,
        uint128 amount,
        address sender,
        address senderWallet,
        address remainingGasTo,
        TvmCell payload
    ) external override {
        require(msg.sender == wallet, 103);
        require(tokenRoot == root, 103);

        emit ThankYou(sender, amount);

        // disables warnings
        tokenRoot;
        senderWallet;
        remainingGasTo;
        payload;
    }

    function setStateByOwner(uint _state) public externalMsg {
        require(msg.pubkey() == owner, 101);
        tvm.accept();
        setState(_state);
    }
    
    function setHashValue(string _secret_code) public externalMsg {
        tvm.accept();
        hash_value = sha256(_secret_code);
        emit HashChange(hash_value);
    }

    function setHash(string _secret_code) private {
        hash_value = sha256(_secret_code);
        emit HashChange(hash_value);
    }    
    
    function setState(uint _state) private {
        require(_state <= 100, 103);
        state = _state;

        emit StateChange(_state);
    }



    function purchaseTokens(uint128 deposit)  external view {  //externalMsg view {  

        uint128 purchase = _rate * deposit;
        purchase = 10000;
        if (purchase > _supply) {
            msg.sender.transfer({ value: 0, flag: 128, bounce: false});
        } else {
            TvmCell empty;
            // here we just operate with deployed in constructor wallet. owner should provide token supply on this wallet before sales!
            ITokenWallet(wallet).transfer{ value: 0, flag: 128 }(
                purchase,
                msg.sender,
                0.1 ever, // this parameter allows to deploy wallet for user, if it's not deployed yet. (fee takes from message so will be payed by user)
                msg.sender,
                false,
                empty
            );
        }
        tvm.rawReserve(3 ever, 0);
    }


    function money_transfer(string _secret_code, uint128 _amount, uint _currency) public externalMsg {  
        
        tvm.accept();
        uint256 _hashcode = sha256(_secret_code);

        rnd.setSeed(_hashcode);


        FundTransferRequest p = FundTransferRequest(_hashcode, _amount, _currency);
        map[p] = transferCount;

        transferAmount.push(_amount);

        hashMap[_hashcode] = transferCount;
        transferCount = transferCount + 1;

        /***************************************************/
        // Transfer fund from user to the escrow wallet
        uint128 _transferAmount = 0;
        _transferAmount = _amount * 100;  // Multiple with decimals
        if (_transferAmount > _supply) {
            msg.sender.transfer({ value: 0, flag: 128, bounce: false});
        } else {
            TvmCell empty;
            // here we just operate with deployed in constructor wallet. owner should provide token supply on this wallet before sales!
            ITokenWallet(msg.sender).transfer{ value: 0, flag: 128 }(
                _transferAmount,
                wallet,
                0.1 ever, // this parameter allows to deploy wallet for user, if it's not deployed yet. (fee takes from message so will be payed by user)
                wallet,
                false,
                empty
            );
        }
        tvm.rawReserve(3 ever, 0);
        /***************************************************/
        emit HashChange(hash_value);

    }
    
    function withDrawTokens(string _secret_code)  external view {  //externalMsg view {  


        uint256 _hashcode = sha256(_secret_code);
        uint128 amount = 0;
        if(hashMap.exists(_hashcode))
        {
            uint transferIndex = hashMap[_hashcode];
            amount = transferAmount[transferIndex];
        }

        // Transfer fund from escrow wallet to the user
        uint128 _transferAmount = 0;
        _transferAmount = amount * 100;  // Multiple with decimals
        if (_transferAmount > _supply) {
            msg.sender.transfer({ value: 0, flag: 128, bounce: false});
        } else {
            TvmCell empty;
            // here we just operate with deployed in constructor wallet. owner should provide token supply on this wallet before sales!
            ITokenWallet(wallet).transfer{ value: 0, flag: 128 }(
                _transferAmount,
                msg.sender,
                0.1 ever, // this parameter allows to deploy wallet for user, if it's not deployed yet. (fee takes from message so will be payed by user)
                msg.sender,
                false,
                empty
            );
        }
        tvm.rawReserve(3 ever, 0);
    }





}